{"ast":null,"code":"import axios from \"axios\";\nimport API from \"../services/api.product\";\nimport ProductList from \"@/components/product/Product.list.vue\";\n\n// export default {\n//   name: \"Home\",\n//   data() {\n//     return {\n//       search: \"\",\n//       show: false,\n//       products: [\n//         {\n//           name: \"Frozen Yogurt\",\n//           qty: 12,\n//           price: 5000,\n//           detail: \"vsjhgdsfs\",\n//         },\n//         {\n//           name: \"tien tiwn\",\n//           qty: 12,\n//           price: 5000,\n//           detail: \"vsjhgdsfs\",\n//         },\n//         {\n//           name: \"asdfdsf sdf\",\n//           qty: 12,\n//           price: 5000,\n//           detail: \"vsjhgdsfs\",\n//         },\n//       ],\n//     };\n//   },\n//   components: {\n//     ProductList,\n//   },\n//   methods: {\n//     async removePro(id) {\n//       console.log(id);\n//       const res = API.deleteProduct(id);\n//       this.created();\n//       this.show = true;\n//     },\n//     async created() {\n//       this.products = await API.getAllProduct();\n//       console.log(this.products);\n//       this.$router.push({\n//         name: \"home\",\n//         params: { message: \"Xóa thành công!\" },\n//       });\n//     },\n//   },\n//   // async mounted() {\n//   //   this.created();\n//   // },\n//   computed: {\n//     filteredPerson: function () {\n//       var self = this;\n//       return this.products.filter(function (product) {\n//         return (\n//           product.name.toLowerCase().indexOf(self.search.toLowerCase()) >= 0 ||\n//           product.price.toLowerCase().indexOf(self.search.toLowerCase()) >= 0\n//         );\n//       });\n//     },\n//   },\n// };\nexport default {\n  data() {\n    return {\n      search: '',\n      calories: '',\n      desserts: [{\n        name: 'Frozen Yogurt',\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        protein: 4.0,\n        iron: '1%'\n      }, {\n        name: 'Ice cream sandwich',\n        calories: 237,\n        fat: 9.0,\n        carbs: 37,\n        protein: 4.3,\n        iron: '1%'\n      }, {\n        name: 'Eclair',\n        calories: 262,\n        fat: 16.0,\n        carbs: 23,\n        protein: 6.0,\n        iron: '7%'\n      }, {\n        name: 'Cupcake',\n        calories: 305,\n        fat: 3.7,\n        carbs: 67,\n        protein: 4.3,\n        iron: '8%'\n      }, {\n        name: 'Gingerbread',\n        calories: 356,\n        fat: 16.0,\n        carbs: 49,\n        protein: 3.9,\n        iron: '16%'\n      }, {\n        name: 'Jelly bean',\n        calories: 375,\n        fat: 0.0,\n        carbs: 94,\n        protein: 0.0,\n        iron: '0%'\n      }, {\n        name: 'Lollipop',\n        calories: 392,\n        fat: 0.2,\n        carbs: 98,\n        protein: 0,\n        iron: '2%'\n      }, {\n        name: 'Honeycomb',\n        calories: 408,\n        fat: 3.2,\n        carbs: 87,\n        protein: 6.5,\n        iron: '45%'\n      }, {\n        name: 'Donut',\n        calories: 452,\n        fat: 25.0,\n        carbs: 51,\n        protein: 4.9,\n        iron: '22%'\n      }, {\n        name: 'KitKat',\n        calories: 518,\n        fat: 26.0,\n        carbs: 65,\n        protein: 7,\n        iron: '6%'\n      }]\n    };\n  },\n  computed: {\n    headers() {\n      return [{\n        text: 'Dessert (100g serving)',\n        align: 'start',\n        sortable: false,\n        value: 'name'\n      }, {\n        text: 'Calories',\n        value: 'calories',\n        filter: value => {\n          if (!this.calories) return true;\n          return value < parseInt(this.calories);\n        }\n      }, {\n        text: 'Fat (g)',\n        value: 'fat'\n      }, {\n        text: 'Carbs (g)',\n        value: 'carbs'\n      }, {\n        text: 'Protein (g)',\n        value: 'protein'\n      }, {\n        text: 'Iron (%)',\n        value: 'iron'\n      }];\n    }\n  },\n  methods: {\n    filterOnlyCapsText(value, search, item) {\n      return value != null && search != null && typeof value === 'string' && value.toString().toLocaleUpperCase().indexOf(search) !== -1;\n    }\n  }\n};","map":{"version":3,"mappings":"AAmFA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;IACA;MACAC;MACAC;MACAC,WACA;QACAC;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAF;QACAG;QACAC;QACAC;QACAC;MACA;IAEA;EACA;EACAC;IACAC;MACA,QACA;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAH;QACAG;QACAC;UACA;UAEA;QACA;MACA,GACA;QAAAJ;QAAAG;MAAA,GACA;QAAAH;QAAAG;MAAA,GACA;QAAAH;QAAAG;MAAA,GACA;QAAAH;QAAAG;MAAA,EACA;IACA;EACA;EACAE;IACAC;MACA,wBACAhB,kBACA,6BACAa;IACA;EACA;AACA","names":["data","search","calories","desserts","name","fat","carbs","protein","iron","computed","headers","text","align","sortable","value","filter","methods","filterOnlyCapsText"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<!-- <template>\n  <v-container>\n    <v-btn color=\"primary\" :to=\"{ name: 'add-pro' }\">\n      <i class=\"fas fa-plus\"></i> &nbsp;Thêm sản phẩm</v-btn\n    >\n    <br />\n    <br />\n\n    <v-alert\n      border=\"left\"\n      close-text\n      dismissible\n      dark\n      color=\"green accent-4\"\n      v-if=\"show\"\n    >\n      Xóa thành công!\n    </v-alert>\n    <v-text-field\n      v-model=\"search\"\n      append-icon=\"mdi-magnify\"\n      label=\"Search (name)\"\n      single-line\n      hide-details\n    ></v-text-field\n    ><br />\n\n    <br />\n\n    <table\n      id=\"contacts\"\n      class=\"table table-bordered table-responsive table-striped\"\n      style=\"width: 100%\"\n    >\n      <thead>\n        <tr>\n          <th>Tên Sản Phẩm</th>\n          <th>Hình ảnh</th>\n          <th>Số Lượng</th>\n          <th>Giá</th>\n          <th>Chi Tiết</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <ProductList :products=\"filteredPerson\"></ProductList>\n    </table>\n  </v-container>\n</template> -->\n<template>\n  <div>\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"desserts\"\n      item-key=\"name\"\n      class=\"elevation-1\"\n      :search=\"search\"\n      :custom-filter=\"filterOnlyCapsText\"\n    >\n      <template v-slot:top>\n        <v-text-field\n          v-model=\"search\"\n          label=\"Search (UPPER CASE ONLY)\"\n          class=\"mx-4\"\n        ></v-text-field>\n      </template>\n      <template v-slot:body.append>\n        <tr>\n          <td></td>\n          <td>\n            <v-text-field\n              v-model=\"calories\"\n              type=\"number\"\n              label=\"Less than\"\n            ></v-text-field>\n          </td>\n          <td colspan=\"4\"></td>\n        </tr>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport API from \"../services/api.product\";\nimport ProductList from \"@/components/product/Product.list.vue\";\n\n// export default {\n//   name: \"Home\",\n//   data() {\n//     return {\n//       search: \"\",\n//       show: false,\n//       products: [\n//         {\n//           name: \"Frozen Yogurt\",\n//           qty: 12,\n//           price: 5000,\n//           detail: \"vsjhgdsfs\",\n//         },\n//         {\n//           name: \"tien tiwn\",\n//           qty: 12,\n//           price: 5000,\n//           detail: \"vsjhgdsfs\",\n//         },\n//         {\n//           name: \"asdfdsf sdf\",\n//           qty: 12,\n//           price: 5000,\n//           detail: \"vsjhgdsfs\",\n//         },\n//       ],\n//     };\n//   },\n//   components: {\n//     ProductList,\n//   },\n//   methods: {\n//     async removePro(id) {\n//       console.log(id);\n//       const res = API.deleteProduct(id);\n//       this.created();\n//       this.show = true;\n//     },\n//     async created() {\n//       this.products = await API.getAllProduct();\n//       console.log(this.products);\n//       this.$router.push({\n//         name: \"home\",\n//         params: { message: \"Xóa thành công!\" },\n//       });\n//     },\n//   },\n//   // async mounted() {\n//   //   this.created();\n//   // },\n//   computed: {\n//     filteredPerson: function () {\n//       var self = this;\n//       return this.products.filter(function (product) {\n//         return (\n//           product.name.toLowerCase().indexOf(self.search.toLowerCase()) >= 0 ||\n//           product.price.toLowerCase().indexOf(self.search.toLowerCase()) >= 0\n//         );\n//       });\n//     },\n//   },\n// };\nexport default {\n    data () {\n      return {\n        search: '',\n        calories: '',\n        desserts: [\n          {\n            name: 'Frozen Yogurt',\n            calories: 159,\n            fat: 6.0,\n            carbs: 24,\n            protein: 4.0,\n            iron: '1%',\n          },\n          {\n            name: 'Ice cream sandwich',\n            calories: 237,\n            fat: 9.0,\n            carbs: 37,\n            protein: 4.3,\n            iron: '1%',\n          },\n          {\n            name: 'Eclair',\n            calories: 262,\n            fat: 16.0,\n            carbs: 23,\n            protein: 6.0,\n            iron: '7%',\n          },\n          {\n            name: 'Cupcake',\n            calories: 305,\n            fat: 3.7,\n            carbs: 67,\n            protein: 4.3,\n            iron: '8%',\n          },\n          {\n            name: 'Gingerbread',\n            calories: 356,\n            fat: 16.0,\n            carbs: 49,\n            protein: 3.9,\n            iron: '16%',\n          },\n          {\n            name: 'Jelly bean',\n            calories: 375,\n            fat: 0.0,\n            carbs: 94,\n            protein: 0.0,\n            iron: '0%',\n          },\n          {\n            name: 'Lollipop',\n            calories: 392,\n            fat: 0.2,\n            carbs: 98,\n            protein: 0,\n            iron: '2%',\n          },\n          {\n            name: 'Honeycomb',\n            calories: 408,\n            fat: 3.2,\n            carbs: 87,\n            protein: 6.5,\n            iron: '45%',\n          },\n          {\n            name: 'Donut',\n            calories: 452,\n            fat: 25.0,\n            carbs: 51,\n            protein: 4.9,\n            iron: '22%',\n          },\n          {\n            name: 'KitKat',\n            calories: 518,\n            fat: 26.0,\n            carbs: 65,\n            protein: 7,\n            iron: '6%',\n          },\n        ],\n      }\n    },\n    computed: {\n      headers () {\n        return [\n          {\n            text: 'Dessert (100g serving)',\n            align: 'start',\n            sortable: false,\n            value: 'name',\n          },\n          {\n            text: 'Calories',\n            value: 'calories',\n            filter: value => {\n              if (!this.calories) return true\n\n              return value < parseInt(this.calories)\n            },\n          },\n          { text: 'Fat (g)', value: 'fat' },\n          { text: 'Carbs (g)', value: 'carbs' },\n          { text: 'Protein (g)', value: 'protein' },\n          { text: 'Iron (%)', value: 'iron' },\n        ]\n      },\n    },\n    methods: {\n      filterOnlyCapsText (value, search, item) {\n        return value != null &&\n          search != null &&\n          typeof value === 'string' &&\n          value.toString().toLocaleUpperCase().indexOf(search) !== -1\n      },\n    },\n  }\n\n</script>\n\n\n<style>\n.i {\n  width: 100px;\n  height: 100px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}